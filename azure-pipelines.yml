# trigger:
# - main

# pool:
#   name: Default

# jobs:
# - job: build
#   steps:
#   - task: JavaToolInstaller@0
#     inputs:
#       versionSpec: '19'
#       jdkArchitectureOption: 'x64'
#       jdkSourceOption: 'LocalDirectory'
#       jdkFile: 'C:\agent\openjdk-19.0.1-1.zip'
#       jdkDestinationDirectory: 'C:\agent\openjdk-19.0.1-1'
#       cleanDestinationDirectory: true
#       createExtractDirectory: false

#   - task: Gradle@3
#     inputs:
#       gradleWrapperFile: 'startUp2/gradlew.bat'
#       workingDirectory: 'startUp2'
#       tasks: 'clean build'
#       publishJUnitResults: false
#       javaHomeOption: 'JDKVersion'
#       sonarQubeRunAnalysis: false
#       spotBugsAnalysis: false
#   - task: CopyFiles@2
#     displayName: 'Copy Files to artifact staging directory'
#     inputs:
#         SourceFolder: '$(System.DefaultWorkingDirectory)'
#         Contents: '**/target/*.?(war|jar)'
#         TargetFolder: $(Build.ArtifactStagingDirectory)
#   - upload: $(Build.ArtifactStagingDirectory)
#     artifact: drop


#   # # Publish artifact
#   # - task: PublishBuildArtifacts@1
#   #   inputs:
#   #     pathToPublish: '$(Pipeline.Workspace)/s/startUp2/build/libs/'
#   #     artifactName: 'drop'
#   # - task: PublishBuildArtifacts@1
#   #   inputs:
#   #     pathToPublish: '$(Pipeline.Workspace)/s/startUp2/deploy.sh'
#   #     artifactName: 'script'


# - deployment: Java
#   dependsOn: build
#   pool:
#     name: 'default'
#   environment: azurevm
#   strategy:
#     runOnce:
#       preDeploy:
#             steps:
#             - download: current
#               artifact: drop
#             - script: echo initialize, cleanup, backup, install certs
#       deploy:
#           steps:

#         # - task: DownloadBuildArtifacts@0
#         #   inputs:
#         #     artifactName: 'drop' 
#         #     downloadPath: '$(System.DefaultWorkingDirectory)/myapp'
#         # - task: DownloadBuildArtifacts@0
#         #   inputs:
#         #     artifactName: 'script' 
#         #     downloadPath: '$(System.DefaultWorkingDirectory)/myapp'
#           - task: SSH@0
#             inputs:
#               sshEndpoint: 'ssh_myvm'
#               runOptions: 'commands'
#               commands: |
#                 sudo mkdir -p /var/www/myapp

#           - task: CopyFilesOverSSH@0
#             inputs:
#               sshEndpoint: 'ssh_myvm' # Replace with your SSH endpoint
#               sourceFolder: '$(Pipeline.Workspace)/drop'
#               contents: '**/target/*.jar'
#               targetFolder: '/var/www/myapp' #shortest

#           - task: SSH@0
#             inputs:
#               sshEndpoint: 'ssh_myvm'
#               runOptions: 'inline'
#               inline: |
#                 echo "Starting deployment script run"
#                 sudo java -jar '/var/www/myapp/app1-1.0-SNAPSHOT.jar' # Update this command if necessary
        

#         # - task: CopyFilesOverSSH@0
#         #   inputs:
#         #     sshEndpoint: 'ssh_myvm'
#         #     sourceFolder: '$(Pipeline.Workspace)/myapp'
#         #     contents: '**/*'
#         #     targetFolder: 'azureuser@52.191.77.169:/var/www/myapp'
#         #     readyTimeout: '20000'

#         # - task: SSH@0
#         #   inputs:
#         #     sshEndpoint: 'ssh_myvm'
#         #     runOptions: 'script'
#         #     scriptPath: '$(Pipeline.Workspace)/s/startUp2/deploy.sh'
#         #     readyTimeout: '20000'


trigger:
- main

pool:
  name: Default

jobs:
- job: build
  steps:
  - task: JavaToolInstaller@0
    inputs:
      versionSpec: '19'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'LocalDirectory'
      jdkFile: 'C:\agent\openjdk-19.0.1-1.zip'
      jdkDestinationDirectory: 'C:\agent\openjdk-19.0.1-1'
      cleanDestinationDirectory: true
      createExtractDirectory: false

  - task: Gradle@3
    inputs:
      gradleWrapperFile: 'startUp2/gradlew.bat'
      workingDirectory: 'startUp2'
      tasks: 'build' # Removed 'clean' for speed unless needed for each build
      publishJUnitResults: false
      javaHomeOption: 'JDKVersion'
      sonarQubeRunAnalysis: false
      spotBugsAnalysis: false

  - task: CopyFiles@2
    displayName: 'Copy JAR to artifact staging directory'
    inputs:
      SourceFolder: 'startUp2/build/libs'  # Adjusted source folder
      Contents: '*.jar'
      TargetFolder: $(Build.ArtifactStagingDirectory)

  - task: PublishPipelineArtifact@1 # Use the correct task for publishing
    inputs:
      targetPath: $(Build.ArtifactStagingDirectory) 
      artifactName: 'drop'

- deployment: Java
  dependsOn: build
  pool:
    name: 'default'
  environment: azurevm
  strategy:
    runOnce:
      preDeploy:
        steps:
        - download: current
          artifact: drop
        # ...  (other steps)

      deploy:
        steps:    
        - task: SSH@0
          inputs:
            sshEndpoint: 'ssh_myvm'
            runOptions: 'commands'
            commands: |
              sudo mkdir -p /var/www/myapp

        - task: CopyFilesOverSSH@0
          inputs:
            sshEndpoint: 'ssh_myvm'
            sourceFolder: '$(Pipeline.Workspace)/drop'  # Download location
            contents: '*.jar' 
            targetFolder: '/home/azureuser'

        - task: SSH@0
          inputs:
            sshEndpoint: 'ssh_myvm'
            runOptions: 'inline'
            inline: |
              echo "Starting deployment script run"
              # Use full path to ensure Java is found
              java -jar '/home/azureuser/app1-1.0-SNAPSHOT.jar'
